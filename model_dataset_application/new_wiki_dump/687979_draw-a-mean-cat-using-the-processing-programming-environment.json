{
  "title":"How to Draw a Mean Cat Using the Processing Programming Environment",
  "url":"https://www.wikihow.com/Draw-a-Mean-Cat-Using-the-Processing-Programming-Environment",
  "category_hierarchy":[
    "Hobbies and Crafts",
    "Drawing"
  ],
  "steps":[
    {
      "headline":"Open a new file.",
      "description":"To begin, open the Processing program. A \u201csketch,\u201d or new file, will automatically be open and ready for typing. It will originally be labeled \u201csketch_xxxxxa,\u201d with the current month and day in the x positions in the file name. You may rename the file to whatever you choose, by selecting File \u2192 Save As\u2026, and typing a new name in the resulting window."
    },
    {
      "headline":"Define window attributes.To begin, we must specify how large we would like the cat image window to be.",
      "description":"To do this, we type the following code:\nsize(200, 200);\nThis is the window size function, and we are passing two numbers that represent how many pixels high and wide we want the program to draw the window. Here, we ask the program to draw the window 200 pixels high and 200 pixels wide."
    },
    {
      "headline":"After specifying the window size, we may specify other window attributes, such as overall image quality and background color.",
      "description":"Below are two functions we will type to do this:\nsmooth();\nbackground(0);\nThe smooth function ensures that all geometric shapes drawn in this window will show with anti-aliased edges. This provides a higher quality image. The background function takes a number argument, here a zero, that represents a color. Because zero is the color for black, the window\u2019s background will now be returned as black."
    },
    {
      "headline":"Define colors that you will use for the cat.",
      "description":"It is good programming practice to use variables to store data that will be used repeatedly throughout a program. In our case, we know that there are a few colors we may want to use more than once in our drawing. We also want to make the programming easier to read. This is why we define the RGB colors before we use them. Here are the colors you will need to draw your mean cat:\ncolor cat body  = color(226);\ncolor earsnose = color(237, 159, 176);\ncolor black = color(0, 0, 0);\ncolor facial = color(202, 200, 193);\ncolor fang = color(249, 16, 85);"
    },
    {
      "headline":"Here, the color data type can be defined as any name desired, then assigned an RGB or grayscale color number set or number.",
      "description":"The color \u201ccatbody\u201d above has been assigned to color 226, which is a medium gray. The other colors use the RGB scale to define more specific hues. To learn more about RGB, grayscale, and other color-related information, please refer to Processing\u2019s color tutorial at http://processing.org/tutorials/color/."
    },
    {
      "headline":"Draw the ears using four triangles.",
      "description":"Now that we know what colors we\u2019ll be using, we will begin to draw the cat. The order in which we draw its features is important for the final display, because the program will draw each shape in the order it\u2019s called. Let\u2019s begin with the ears:"
    },
    {
      "headline":"First, we choose the color we\u2019d like the main part of the ears to be filled with.",
      "description":"fill the cat's body."
    },
    {
      "headline":"Then, we specify the x and y coordinates for the points in the triangles that form the ear shapes:",
      "description":"triangle(50, 50, 50, 90, 90, 60); triangle(150, 50, 150, 90, 110, 60);"
    },
    {
      "headline":"Next, we choose another color to fill the inside of the ears with:",
      "description":"fill(earsnose);"
    },
    {
      "headline":"And last, we specify the x and y coordinates for the points forming the triangles for the inner ear:",
      "description":"triangle(55, 55, 55, 95, 95, 65); triangle(145, 55, 145, 95, 105, 65);"
    },
    {
      "headline":"Since the triangle function takes three sets of x and y coordinates for the window in which we are drawing the cat, we type those numbers in the order that we want the triangle\u2019s points drawn.",
      "description":"The fill function takes a color as an argument and returns that color inside the triangles that follow the call. We now have ears!"
    },
    {
      "headline":"Draw the head in the center of the window.",
      "description":"To draw the head, type the following:\nfill(catbody);\nnoStroke();\nellipse(100, 100, 100, 100);"
    },
    {
      "headline":"Here we are using another fill color for the circle we will draw to create the cat\u2019s head.",
      "description":"The noStroke function specifies that we do not wish to have an outline around the shape following it. In this case, that shape is of course the cat\u2019s head, which is drawn using the ellipse function. The ellipse function accepts four numbers: an x and y coordinate for the placement of the circle, and pixel width and height of the ellipse at that position."
    },
    {
      "headline":"The next step in our drawing is to make the mean cat fangs.",
      "description":"The following code does this for us:\nfill(fang);\ntriangle(85, 130, 95, 130, 90, 146);\ntriangle(95, 120, 105, 120, 100, 146);\ntriangle(105, 130, 115, 130, 110, 146);"
    },
    {
      "headline":"Essentially, we are drawing three long, skinny triangles to jut downward from the mouth area.",
      "description":"We specify our fangs\u2019 fill color, and then create the triangles using the triangle functions again."
    },
    {
      "headline":"Because we want the fangs to be partially covered by the cat\u2019s nose area, we draw the nose area after we draw the fangs.",
      "description":"The code for this is as follows:\n//draw muzzle\nfill(facial);\nellipse(115, 120, 30, 30);\nellipse(85, 120, 30, 30);"
    },
    {
      "headline":"Here, we choose a fill color and draw two matching ellipses over the fangs at the specified coordinates.",
      "description":"//draw nose\nfill(earsnose);\nstroke(1);\ntriangle(100, 100, 90, 115, 110, 115);"
    },
    {
      "headline":"Here, we choose a fill color for the nose, drawing a small triangle in the center of the cat\u2019s face.",
      "description":"The stroke function brings back the outlining feature that we previously turned off, passing the number 1 to it to denote the grayscale level desired for the nose\u2019s outline color."
    },
    {
      "headline":"Next, we place the eyes.",
      "description":"This is done by drawing gray circles containing smaller black circles within them. The code for this is as follows:\nFor the larger, gray circles:\nfill(facial);\nellipse(80, 90, 20, 20);\nellipse(120, 90, 20, 20);\n\nFor the smaller, black circles:\nfill(black);\nellipse(80, 95, 10, 10);\nellipse(120, 95, 10, 10);\n\nRemember that the stroke function is still \u201con,\u201d therefore the eyes will be outlined. This adds contrast and looks nice."
    },
    {
      "headline":"Now, to draw the mean eyebrows, we type the following code:",
      "description":"strokeWeight(12); line(90, 80, 70, 65); line(110, 80, 130, 65);"
    },
    {
      "headline":"Since we would like the eyebrows to be thick and menacing, we want to use a line function, and we want the line drawn to be very thick.",
      "description":"To do this, we call the strokeWeight function, passing the number of pixels wide we would like the line to be drawn. Then we simply call two line functions, which accept two sets of x/y coordinates, drawing lines between those points in the window."
    },
    {
      "headline":"The last part of the cat to draw is his whiskers.",
      "description":"To draw whiskers, we again use the line function. The code for the whiskers is as follows:\nstrokeWeight(1);\nline(115, 115, 135, 105);\nline(117, 119, 135, 120);\nline(115, 123, 135, 130);\nline(85, 115, 65, 105);\nline(83, 119, 65, 120);\nline(85, 123, 65, 130);"
    },
    {
      "headline":"Notice that we must change the strokeWeight so that the lines aren\u2019t drawn 12 pixels wide, as they were drawn for the eyebrows!",
      "description":"One pixel is enough width for a delicate whisker."
    },
    {
      "headline":"Now that we\u2019ve completed the cat drawing, it\u2019s time to compile the program and run it.",
      "description":"First, save the file. Then to run the program and see the resulting window we\u2019ve drawn, press the \u201cplay\u201d button at the top of the window or press Ctrl + R. The cat will appear in its own 200 x 200 window."
    },
    {
      "headline":"It is a good idea, when creating your own drawings, to periodically check the progress of the drawing by saving and running the program throughout the programming process.",
      "description":""
    },
    {
      "headline":"Enjoy the mean cat and be glad your own cat is very nice.",
      "description":""
    }
  ],
  "text":" Open a new file. To begin, open the Processing program. A \u201csketch,\u201d or new file, will automatically be open and ready for typing. It will originally be labeled \u201csketch_xxxxxa,\u201d with the current month and day in the x positions in the file name. You may rename the file to whatever you choose, by selecting File \u2192 Save As\u2026, and typing a new name in the resulting window. Define window attributes.To begin, we must specify how large we would like the cat image window to be. To do this, we type the following code:\nsize(200, 200);\nThis is the window size function, and we are passing two numbers that represent how many pixels high and wide we want the program to draw the window. Here, we ask the program to draw the window 200 pixels high and 200 pixels wide. After specifying the window size, we may specify other window attributes, such as overall image quality and background color. Below are two functions we will type to do this:\nsmooth();\nbackground(0);\nThe smooth function ensures that all geometric shapes drawn in this window will show with anti-aliased edges. This provides a higher quality image. The background function takes a number argument, here a zero, that represents a color. Because zero is the color for black, the window\u2019s background will now be returned as black. Define colors that you will use for the cat. It is good programming practice to use variables to store data that will be used repeatedly throughout a program. In our case, we know that there are a few colors we may want to use more than once in our drawing. We also want to make the programming easier to read. This is why we define the RGB colors before we use them. Here are the colors you will need to draw your mean cat:\ncolor cat body  = color(226);\ncolor earsnose = color(237, 159, 176);\ncolor black = color(0, 0, 0);\ncolor facial = color(202, 200, 193);\ncolor fang = color(249, 16, 85); Here, the color data type can be defined as any name desired, then assigned an RGB or grayscale color number set or number. The color \u201ccatbody\u201d above has been assigned to color 226, which is a medium gray. The other colors use the RGB scale to define more specific hues. To learn more about RGB, grayscale, and other color-related information, please refer to Processing\u2019s color tutorial at http://processing.org/tutorials/color/. Draw the ears using four triangles. Now that we know what colors we\u2019ll be using, we will begin to draw the cat. The order in which we draw its features is important for the final display, because the program will draw each shape in the order it\u2019s called. Let\u2019s begin with the ears: First, we choose the color we\u2019d like the main part of the ears to be filled with. fill the cat's body. Then, we specify the x and y coordinates for the points in the triangles that form the ear shapes: triangle(50, 50, 50, 90, 90, 60); triangle(150, 50, 150, 90, 110, 60); Next, we choose another color to fill the inside of the ears with: fill(earsnose); And last, we specify the x and y coordinates for the points forming the triangles for the inner ear: triangle(55, 55, 55, 95, 95, 65); triangle(145, 55, 145, 95, 105, 65); Since the triangle function takes three sets of x and y coordinates for the window in which we are drawing the cat, we type those numbers in the order that we want the triangle\u2019s points drawn. The fill function takes a color as an argument and returns that color inside the triangles that follow the call. We now have ears! Draw the head in the center of the window. To draw the head, type the following:\nfill(catbody);\nnoStroke();\nellipse(100, 100, 100, 100); Here we are using another fill color for the circle we will draw to create the cat\u2019s head. The noStroke function specifies that we do not wish to have an outline around the shape following it. In this case, that shape is of course the cat\u2019s head, which is drawn using the ellipse function. The ellipse function accepts four numbers: an x and y coordinate for the placement of the circle, and pixel width and height of the ellipse at that position. The next step in our drawing is to make the mean cat fangs. The following code does this for us:\nfill(fang);\ntriangle(85, 130, 95, 130, 90, 146);\ntriangle(95, 120, 105, 120, 100, 146);\ntriangle(105, 130, 115, 130, 110, 146); Essentially, we are drawing three long, skinny triangles to jut downward from the mouth area. We specify our fangs\u2019 fill color, and then create the triangles using the triangle functions again. Because we want the fangs to be partially covered by the cat\u2019s nose area, we draw the nose area after we draw the fangs. The code for this is as follows:\n//draw muzzle\nfill(facial);\nellipse(115, 120, 30, 30);\nellipse(85, 120, 30, 30); Here, we choose a fill color and draw two matching ellipses over the fangs at the specified coordinates. //draw nose\nfill(earsnose);\nstroke(1);\ntriangle(100, 100, 90, 115, 110, 115); Here, we choose a fill color for the nose, drawing a small triangle in the center of the cat\u2019s face. The stroke function brings back the outlining feature that we previously turned off, passing the number 1 to it to denote the grayscale level desired for the nose\u2019s outline color. Next, we place the eyes. This is done by drawing gray circles containing smaller black circles within them. The code for this is as follows:\nFor the larger, gray circles:\nfill(facial);\nellipse(80, 90, 20, 20);\nellipse(120, 90, 20, 20);\n\nFor the smaller, black circles:\nfill(black);\nellipse(80, 95, 10, 10);\nellipse(120, 95, 10, 10);\n\nRemember that the stroke function is still \u201con,\u201d therefore the eyes will be outlined. This adds contrast and looks nice. Now, to draw the mean eyebrows, we type the following code: strokeWeight(12); line(90, 80, 70, 65); line(110, 80, 130, 65); Since we would like the eyebrows to be thick and menacing, we want to use a line function, and we want the line drawn to be very thick. To do this, we call the strokeWeight function, passing the number of pixels wide we would like the line to be drawn. Then we simply call two line functions, which accept two sets of x/y coordinates, drawing lines between those points in the window. The last part of the cat to draw is his whiskers. To draw whiskers, we again use the line function. The code for the whiskers is as follows:\nstrokeWeight(1);\nline(115, 115, 135, 105);\nline(117, 119, 135, 120);\nline(115, 123, 135, 130);\nline(85, 115, 65, 105);\nline(83, 119, 65, 120);\nline(85, 123, 65, 130); Notice that we must change the strokeWeight so that the lines aren\u2019t drawn 12 pixels wide, as they were drawn for the eyebrows! One pixel is enough width for a delicate whisker. Now that we\u2019ve completed the cat drawing, it\u2019s time to compile the program and run it. First, save the file. Then to run the program and see the resulting window we\u2019ve drawn, press the \u201cplay\u201d button at the top of the window or press Ctrl + R. The cat will appear in its own 200 x 200 window. It is a good idea, when creating your own drawings, to periodically check the progress of the drawing by saving and running the program throughout the programming process.  Enjoy the mean cat and be glad your own cat is very nice. ",
  "tyn_model":[
    "cat",
    "triangle",
    "fill",
    "line",
    "program",
    "\u201csketch",
    "\u201d or",
    "\u201csketch_xxxxxa",
    "\u201d with",
    "\u2192 save",
    "\u2026,",
    "smooth",
    "variables",
    "\u201ccatbody",
    "\u201d above",
    "colors",
    "color",
    "\u2019 fill",
    "\u201con",
    "\u201d therefore",
    "\u201cplay",
    "\u201d button"
  ],
  "tyn_section":[

  ]
}