{
    "title": "How to Quick Sort an Array in C++",
    "url": "https://www.wikihow.com/Quick-Sort-an-Array-in-C%2B%2B",
    "category_hierarchy": [
        "Computers and Electronics",
        "Software",
        "Programming",
        "C Programming Languages"
    ],
    "parts": [
        {
            "name": "Creating the quickSort Function",
            "steps": [
                {
                    "headline": "Create the quickSort function.",
                    "description": "This is a recursive void function. It requires three parameters:\nThe array (an int array)\nThe left bound (an int variable)\nThe right bound (an int variable; the size of the array subtracted by 1)"
                },
                {
                    "headline": "Create the variables.",
                    "description": "These variables will be used to go through the list and to swap the values. Four variables are needed:\nAn int i (the left bound)\nAn int j (the right bound)\nAn int temp (a temporary variable used for swapping without losing any data)\nAn int pivot (the value of the middle point that splits the list to make it easier to sort)"
                },
                {
                    "headline": "Create a while loop to begin sorting.",
                    "description": "A loop while i \u2264 j is used to go through the indexes of the list. These values will be changed as the sublists that are being sorted change."
                },
                {
                    "headline": "Iterate through the left side.",
                    "description": "Another while loop checking if the element is less than pivot iterates through the list. If it is less than pivot value, increase i by 1. This checks if the left side of the sublist needs to be sorted."
                },
                {
                    "headline": "Iterate through the right side.",
                    "description": "Another while loop checking if the element is greater than pivot iterates through the list. If it is greater than pivot, decrease j by 1. This checks if the right side of the sublist needs to be sorted."
                },
                {
                    "headline": "Begin swapping the values if i \u2264 j. Swapping the values of the list puts the values in ascending order.",
                    "description": "Assigning one value to another without a temporary variable will result in a loss of data. To avoid this, this procedure is used:\nAssign the value of the list at index i to temp. Assign the value of the list at index jto the list at index i. Assign temp to the list at index j. Add 1 to i.\nSubtract 1 from j."
                },
                {
                    "headline": "Check if each half of the list is sorted.",
                    "description": "This is done by two recursive calls. The first function call sorts the left sublist created by changing the bounds. When the left side is completely sorted, the next recursive call sorts the right sublist by changing its bounds. If left < j, call the function with left and i as the bounds. If right < i, call the function with i and right as the bounds."
                }
            ]
        },
        {
            "name": "Testing the quickSort Function",
            "steps": [
                {
                    "headline": "Create the list in the main function.",
                    "description": "The array can be any size and can be initialized both explicitly and through other methods."
                },
                {
                    "headline": "Output the unsorted list using a for-loop.",
                    "description": "The bounds of the loop go from 0 to the sizeof(list)/4. This piece of code gives the number of elements in list."
                },
                {
                    "headline": "Call the quickSort function.",
                    "description": "The three needed parameters are:\nThe list\n\nThe left bound (0)\nThe right bound (the size of the array subtracted by 1)"
                },
                {
                    "headline": "Output the new list using a for-loop.",
                    "description": "Again, the bounds of the loop go from 0 to the sizeof(list)/4. This is because the sorted list contains the same amount of elements as the unsorted list (no data was lost)."
                },
                {
                    "headline": "Run the program to see the sorted list.",
                    "description": "The number of items in list should be the same in both lists."
                }
            ]
        }
    ],
    "tyn": [
        "A computer with an integrated developmental environment",
        "Programming experience with arrays (or vectors), functions, and recursion."
    ],
    "text": " Creating the quickSort Function Create the quickSort function. This is a recursive void function. It requires three parameters:\nThe array (an int array)\nThe left bound (an int variable)\nThe right bound (an int variable; the size of the array subtracted by 1) Create the variables. These variables will be used to go through the list and to swap the values. Four variables are needed:\nAn int i (the left bound)\nAn int j (the right bound)\nAn int temp (a temporary variable used for swapping without losing any data)\nAn int pivot (the value of the middle point that splits the list to make it easier to sort) Create a while loop to begin sorting. A loop while i \u2264 j is used to go through the indexes of the list. These values will be changed as the sublists that are being sorted change. Iterate through the left side. Another while loop checking if the element is less than pivot iterates through the list. If it is less than pivot value, increase i by 1. This checks if the left side of the sublist needs to be sorted. Iterate through the right side. Another while loop checking if the element is greater than pivot iterates through the list. If it is greater than pivot, decrease j by 1. This checks if the right side of the sublist needs to be sorted. Begin swapping the values if i \u2264 j. Swapping the values of the list puts the values in ascending order. Assigning one value to another without a temporary variable will result in a loss of data. To avoid this, this procedure is used:\nAssign the value of the list at index i to temp. Assign the value of the list at index jto the list at index i. Assign temp to the list at index j. Add 1 to i.\nSubtract 1 from j. Check if each half of the list is sorted. This is done by two recursive calls. The first function call sorts the left sublist created by changing the bounds. When the left side is completely sorted, the next recursive call sorts the right sublist by changing its bounds. If left < j, call the function with left and i as the bounds. If right < i, call the function with i and right as the bounds. Testing the quickSort Function Create the list in the main function. The array can be any size and can be initialized both explicitly and through other methods. Output the unsorted list using a for-loop. The bounds of the loop go from 0 to the sizeof(list)/4. This piece of code gives the number of elements in list. Call the quickSort function. The three needed parameters are:\nThe list\n\nThe left bound (0)\nThe right bound (the size of the array subtracted by 1) Output the new list using a for-loop. Again, the bounds of the loop go from 0 to the sizeof(list)/4. This is because the sorted list contains the same amount of elements as the unsorted list (no data was lost). Run the program to see the sorted list. The number of items in list should be the same in both lists.",
    "sentences": [
        " Creating the quickSort Function Create the quickSort function.",
        "This is a recursive void function.",
        "It requires three parameters:\nThe array (an int array)\nThe left bound (an int variable)\nThe right bound (an int variable; the size of the array subtracted by 1) Create the variables.",
        "These variables will be used to go through the list and to swap the values.",
        "Four variables are needed:\nAn int i (the left bound)\nAn int j (the right bound)\nAn int temp (a temporary variable used for swapping without losing any data)\nAn int pivot (the value of the middle point that splits the list to make it easier to sort) Create a while loop to begin sorting.",
        "A loop while i \u2264 j is used to go through the indexes of the list.",
        "These values will be changed as the sublists that are being sorted change.",
        "Iterate through the left side.",
        "Another while loop checking if the element is less than pivot iterates through the list.",
        "If it is less than pivot value, increase i by 1.",
        "This checks if the left side of the sublist needs to be sorted.",
        "Iterate through the right side.",
        "Another while loop checking if the element is greater than pivot iterates through the list.",
        "If it is greater than pivot, decrease j by 1.",
        "This checks if the right side of the sublist needs to be sorted.",
        "Begin swapping the values if i \u2264 j. Swapping the values of the list puts the values in ascending order.",
        "Assigning one value to another without a temporary variable will result in a loss of data.",
        "To avoid this, this procedure is used:\nAssign the value of the list at index i to temp.",
        "Assign the value of the list at index jto the list at index i.",
        "Assign temp to the list at index j.",
        "Add 1 to i.\nSubtract 1 from j.",
        "Check if each half of the list is sorted.",
        "This is done by two recursive calls.",
        "The first function call sorts the left sublist created by changing the bounds.",
        "When the left side is completely sorted, the next recursive call sorts the right sublist by changing its bounds.",
        "If left < j, call the function with left and i as the bounds.",
        "If right < i, call the function with i and right as the bounds.",
        "Testing the quickSort Function Create the list in the main function.",
        "The array can be any size and can be initialized both explicitly and through other methods.",
        "Output the unsorted list using a for-loop.",
        "The bounds of the loop go from 0 to the sizeof(list)/4.",
        "This piece of code gives the number of elements in list.",
        "Call the quickSort function.",
        "The three needed parameters are:\nThe list\n\nThe left bound (0)\nThe right bound (the size of the array subtracted by 1) Output the new list using a for-loop.",
        "Again, the bounds of the loop go from 0 to the sizeof(list)/4.",
        "This is because the sorted list contains the same amount of elements as the unsorted list (no data was lost).",
        "Run the program to see the sorted list.",
        "The number of items in list should be the same in both lists."
    ]
}