{
    "title": "How to Write PHP Scripts",
    "url": "https://www.wikihow.com/Write-PHP-Scripts",
    "category_hierarchy": [
        "Computers and Electronics",
        "Software",
        "Web Programming",
        "PHP"
    ],
    "parts": [
        {
            "name": "Getting Started with Echo Statements",
            "steps": [
                {
                    "headline": "Open a text editor.",
                    "description": "This is the program you will be using write and edit your code. Notepad can be accessed on any version of Windows using \u229e Win + R > Notepad. TextEdit can be accessed on Mac by going to Applications > TextEdit."
                },
                {
                    "headline": "Type a simple statement into Notepad.",
                    "description": "A section of PHP code begins and ends with bracketed PHP tags (\u201c<?php\u201d \u201c?>\u201d). \u201cEcho\u201d is a very basic statement (an instruction to the computer) in the PHP language that will output text to the screen. The text you want to echo must be enclosed in quotation marks and end in a semi-colon. The code should look something like <?php echo \u201cHello World!\u201d; ?>."
                },
                {
                    "headline": "Save the file with name \u201chello world\u201d and the extension .php.",
                    "description": "This is done by navigating to File > Save As... In Notepad, add .php to the end of the filename and enclose in double quotations. This ensures the file will not be converted into a basic text file by Notepad. Without the quotation marks, the file will become hello world.php.txt. Alternatively, you can select the drop down menu under Save as type and change it to \"All Files (*. *)\" which will leave the name exactly how you type it and the quotes will not be needed. In TextEdit, no quotations marks are necessary, but a popup will appear asking you to verify that you want the file saved as .php. Make sure you save the file to your \u201cserver\u2019s\u201d document root directory. Typically this is the folder named \u201chtdocs\u201d in your Apache folder on Windows, or /Library/Webserver/Documents on Mac, but can be set by the user manually."
                },
                {
                    "headline": "Access the PHP file with a web browser.",
                    "description": "Open your preferred web browser and type this address in the address bar using the name of your php file: http://localhost/hello world.php. Your browser window should display the echo statement. If you receive an error message, make sure you typed the code correctly as shown above, including the colon. Also make sure that your file is saved into the correct directory."
                }
            ]
        },
        {
            "name": "Utilizing PHP and HTML",
            "steps": [
                {
                    "headline": "Understand the \u2018php\u2019 tags.",
                    "description": "The \u201c<?php\u201d and \u201c?>\u201d tags tell the PHP engine that everything between them is PHP code. Everything outside the two tags is treated as HTML and ignored by the PHP engine and sent to your browser the same as any other HTML. The important thing to recognize here is that PHP scripts are embedded inside regular HTML pages."
                },
                {
                    "headline": "Understand the statement between the tags.",
                    "description": "Statements are used to tell the PHP engine to do something. In the case of an echo statement, you are telling the engine to print what is inside the quotes. The PHP engine itself never actually prints anything to your screen. Any output generated by the engine is sent to your browser as HTML. Your browser does not know that it's getting PHP output. As far as the browser is concerned, it's getting plain HTML."
                },
                {
                    "headline": "Use HTML tags to make your statement bold.",
                    "description": "Adding HTML tags can alter the output of the php statement. The \u201c<strong>\u201d \u201c</strong>\u201d tags will add bold formatting to any text placed inside of them. Note that these tags appear on the outside of the text, but inside of the quotations marks of the echo statement. You want your code to look something like: <?php?echo \"<strong>Hello World!</strong>\";?>"
                },
                {
                    "headline": "Save and open the file in the browser.",
                    "description": "Go to File > Save As\u2026 and save the file as \"helloworld2.php\u201d, and open it in your browser by using the address: http://localhost/helloworld2.php. The output is the same as before, but this time the text is in bold. Make sure you save the file to your \u201cserver\u2019s\u201d document root directory. Typically this is the folder named \u201chtdocs\u201d in your Apache folder on Windows, or /Library/Webserver/Documents on OSX, but can be set by the user manually."
                },
                {
                    "headline": "Edit the file to add a second echo statement.",
                    "description": "Remember, statements need to be separated by a semicolon. Your code should look something like:<?php echo \u201cHello World!\u201d<br>;echo \u201cHow are you doing?\u201d; ?>"
                },
                {
                    "headline": "Save and run the file as \"hello world double.php\".",
                    "description": "The page will display two echo statements, listed in order, on two lines. Notice the \u201c<br>\u201d on the first line. This is HTML markup to insert a line break. If you didn't add this, your output would look like this: Hello World!How are you doing?"
                }
            ]
        },
        {
            "name": "Getting to Know Variables",
            "steps": [
                {
                    "headline": "Think of variables as containers for data.",
                    "description": "To manipulate data, be it numbers or names, you need to store the data in a container. This process is called declaring the variable. The syntax for declaring a variable is \u201c$myVariable = \u201cHello World!\u201d;\u201d\nThe dollar sign ($) at the beginning tells PHP that $myVariable is a variable. All variables must start with the dollar sign, but the name of the variable can be anything. In the above example, the value is \"Hello World! \", and the variable is $myVariable. You're telling PHP to store the value at the right of the equal sign, into the variable at the left of the equal sign. A variable containing a text value is known as a string."
                },
                {
                    "headline": "Call the variable.",
                    "description": "Referring to a variable in the code is known as a call. Declare your variable, then echo the variable instead of typing out the text. Your code might look something like:<?php>$myVariable = \u201cHello World!\u201d;echo $myVariable;?>"
                },
                {
                    "headline": "Save and run the file.",
                    "description": "Go to File > Save As\u2026 and save the file as \u201cmyfirstvariable.php\u201d. Open your browser and navigate to http://localhost/myfirstvariable.php and the script will print the variable. The output looks the same as printing plain text, but how it was achieved is different. Make sure you save the file to your \u201cserver\u2019s\u201d document root directory. Typically this is the folder named \u201chtdocs\u201d in your Apache folder on Windows, or /Library/Webserver/Documents on OSX, but can be set by the user manually."
                },
                {
                    "headline": "Use variables with numbers.",
                    "description": "Variables can also contain numbers (known as integers), and then those numbers can be manipulated using simple mathematical functions. Start by declaring three variables called \u201c$mySmallNumber\u201d, \u201c$myLargeNumber\u201d, and \u201c$myTotal\u201d. Your code should look something like:<?php$mySmallNumber;$myLargeNumber;$myTotal;?>"
                },
                {
                    "headline": "Assign integer values to the first two variables.",
                    "description": "Give an integer value to \u201c$mySmallNumber\u201d and \u201cmyLargeNumber\u201d. Note that integer values do not need to be contained in quotation marks. That will cause numbers to be treated as a text value like the \u201cHello World!\u201d variable. Your code should look something like:<?php$mySmallNumber = 12;$myLargeNumber = 356;$myTotal;?>"
                },
                {
                    "headline": "Use the third variable to calculate and print the sum of the other variables.",
                    "description": "Rather than doing the math yourself, you can call the two variables in the \u201c$myTotal\u201d variable. Using a mathematical function, the machine will calculate the sum for you. To print the variable, you need only add an echo statement that calls the variable after the declaration. Any change to either integer variable would be reflected when printing the \u201c$myTotal\u201d variable with echo. Your code should look something like:<?php$mySmallNumber = 12;$myLargeNumber = 356;$myTotal = $mySmall Number + $myLargeNumber;echo $myTotal;?>"
                },
                {
                    "headline": "Save the file and run this script.",
                    "description": "Your browser window will display a single number. That number is the sum of the two variables called in the \u201c$myTotal\u201d variable."
                },
                {
                    "headline": "Review your string variables.",
                    "description": "Using a variable to store text allows you to call that variable any time you want to use the store value instead of constantly typing out the contained text. It also allows for more complex manipulation of the stored data moving forward. The first variable, $myVariable, contains a string value; \"Hello World!\". Unless you change the value, $myVariable will always contain the value \"Hello World!\". The echo statement prints the contained value of $myVariable."
                },
                {
                    "headline": "Review your integer variables.",
                    "description": "You have explored basic manipulation of integer variables by using a mathematical function. The resulting data can be stored into another variable. This is only the beginning of what can be accomplished with these variables. The two variables, $mySmallNumber, and $myLargeNumber are each assigned an integer value. The third variable, $myTotal, stores the added values of $mySmallNumber and $myLargeNumber. Since $mySmallNumber holds one numeric value, and $myLargeNumber holds a second numeric value, this means $myTotal holds the value of the first number added to the second number. This value can change with alterations to either of the included variables."
                }
            ]
        }
    ],
    "tyn": [
        "The Apache Web Server",
        " (Win32)",
        "PHP",
        "Windows Notepad",
        "Notepad++ (Win) (Has syntax highlighting for easier reading)",
        "Textwrangler  (Mac) (Has similar capabilities as Notepad++)",
        "WYSIWYG",
        "Adobe Dreamweaver",
        "Microsoft Expression Web",
        "Some IDEs like Microsoft Visual Studio Web.",
        "Mozilla Firefox (Any browser will work, but Mozilla is a popular choice amongst web developers)",
        "For basic users try ",
        "XAMPP",
        ".(A free program that makes your computer a server with  PHP, Perl, and many addons including Python)"
    ],
    "text": " Getting Started with Echo Statements Open a text editor. This is the program you will be using write and edit your code. Notepad can be accessed on any version of Windows using \u229e Win + R > Notepad. TextEdit can be accessed on Mac by going to Applications > TextEdit. Type a simple statement into Notepad. A section of PHP code begins and ends with bracketed PHP tags (\u201c<?php\u201d \u201c?>\u201d). \u201cEcho\u201d is a very basic statement (an instruction to the computer) in the PHP language that will output text to the screen. The text you want to echo must be enclosed in quotation marks and end in a semi-colon. The code should look something like <?php echo \u201cHello World!\u201d; ?>. Save the file with name \u201chello world\u201d and the extension .php. This is done by navigating to File > Save As... In Notepad, add .php to the end of the filename and enclose in double quotations. This ensures the file will not be converted into a basic text file by Notepad. Without the quotation marks, the file will become hello world.php.txt. Alternatively, you can select the drop down menu under Save as type and change it to \"All Files (*. *)\" which will leave the name exactly how you type it and the quotes will not be needed. In TextEdit, no quotations marks are necessary, but a popup will appear asking you to verify that you want the file saved as .php. Make sure you save the file to your \u201cserver\u2019s\u201d document root directory. Typically this is the folder named \u201chtdocs\u201d in your Apache folder on Windows, or /Library/Webserver/Documents on Mac, but can be set by the user manually. Access the PHP file with a web browser. Open your preferred web browser and type this address in the address bar using the name of your php file: http://localhost/hello world.php. Your browser window should display the echo statement. If you receive an error message, make sure you typed the code correctly as shown above, including the colon. Also make sure that your file is saved into the correct directory. Utilizing PHP and HTML Understand the \u2018php\u2019 tags. The \u201c<?php\u201d and \u201c?>\u201d tags tell the PHP engine that everything between them is PHP code. Everything outside the two tags is treated as HTML and ignored by the PHP engine and sent to your browser the same as any other HTML. The important thing to recognize here is that PHP scripts are embedded inside regular HTML pages. Understand the statement between the tags. Statements are used to tell the PHP engine to do something. In the case of an echo statement, you are telling the engine to print what is inside the quotes. The PHP engine itself never actually prints anything to your screen. Any output generated by the engine is sent to your browser as HTML. Your browser does not know that it's getting PHP output. As far as the browser is concerned, it's getting plain HTML. Use HTML tags to make your statement bold. Adding HTML tags can alter the output of the php statement. The \u201c<strong>\u201d \u201c</strong>\u201d tags will add bold formatting to any text placed inside of them. Note that these tags appear on the outside of the text, but inside of the quotations marks of the echo statement. You want your code to look something like: <?php?echo \"<strong>Hello World!</strong>\";?> Save and open the file in the browser. Go to File > Save As\u2026 and save the file as \"helloworld2.php\u201d, and open it in your browser by using the address: http://localhost/helloworld2.php. The output is the same as before, but this time the text is in bold. Make sure you save the file to your \u201cserver\u2019s\u201d document root directory. Typically this is the folder named \u201chtdocs\u201d in your Apache folder on Windows, or /Library/Webserver/Documents on OSX, but can be set by the user manually. Edit the file to add a second echo statement. Remember, statements need to be separated by a semicolon. Your code should look something like:<?php echo \u201cHello World!\u201d<br>;echo \u201cHow are you doing?\u201d; ?> Save and run the file as \"hello world double.php\". The page will display two echo statements, listed in order, on two lines. Notice the \u201c<br>\u201d on the first line. This is HTML markup to insert a line break. If you didn't add this, your output would look like this: Hello World!How are you doing? Getting to Know Variables Think of variables as containers for data. To manipulate data, be it numbers or names, you need to store the data in a container. This process is called declaring the variable. The syntax for declaring a variable is \u201c$myVariable = \u201cHello World!\u201d;\u201d\nThe dollar sign ($) at the beginning tells PHP that $myVariable is a variable. All variables must start with the dollar sign, but the name of the variable can be anything. In the above example, the value is \"Hello World! \", and the variable is $myVariable. You're telling PHP to store the value at the right of the equal sign, into the variable at the left of the equal sign. A variable containing a text value is known as a string. Call the variable. Referring to a variable in the code is known as a call. Declare your variable, then echo the variable instead of typing out the text. Your code might look something like:<?php>$myVariable = \u201cHello World!\u201d;echo $myVariable;?> Save and run the file. Go to File > Save As\u2026 and save the file as \u201cmyfirstvariable.php\u201d. Open your browser and navigate to http://localhost/myfirstvariable.php and the script will print the variable. The output looks the same as printing plain text, but how it was achieved is different. Make sure you save the file to your \u201cserver\u2019s\u201d document root directory. Typically this is the folder named \u201chtdocs\u201d in your Apache folder on Windows, or /Library/Webserver/Documents on OSX, but can be set by the user manually. Use variables with numbers. Variables can also contain numbers (known as integers), and then those numbers can be manipulated using simple mathematical functions. Start by declaring three variables called \u201c$mySmallNumber\u201d, \u201c$myLargeNumber\u201d, and \u201c$myTotal\u201d. Your code should look something like:<?php$mySmallNumber;$myLargeNumber;$myTotal;?> Assign integer values to the first two variables. Give an integer value to \u201c$mySmallNumber\u201d and \u201cmyLargeNumber\u201d. Note that integer values do not need to be contained in quotation marks. That will cause numbers to be treated as a text value like the \u201cHello World!\u201d variable. Your code should look something like:<?php$mySmallNumber = 12;$myLargeNumber = 356;$myTotal;?> Use the third variable to calculate and print the sum of the other variables. Rather than doing the math yourself, you can call the two variables in the \u201c$myTotal\u201d variable. Using a mathematical function, the machine will calculate the sum for you. To print the variable, you need only add an echo statement that calls the variable after the declaration. Any change to either integer variable would be reflected when printing the \u201c$myTotal\u201d variable with echo. Your code should look something like:<?php$mySmallNumber = 12;$myLargeNumber = 356;$myTotal = $mySmall Number + $myLargeNumber;echo $myTotal;?> Save the file and run this script. Your browser window will display a single number. That number is the sum of the two variables called in the \u201c$myTotal\u201d variable. Review your string variables. Using a variable to store text allows you to call that variable any time you want to use the store value instead of constantly typing out the contained text. It also allows for more complex manipulation of the stored data moving forward. The first variable, $myVariable, contains a string value; \"Hello World!\". Unless you change the value, $myVariable will always contain the value \"Hello World!\". The echo statement prints the contained value of $myVariable. Review your integer variables. You have explored basic manipulation of integer variables by using a mathematical function. The resulting data can be stored into another variable. This is only the beginning of what can be accomplished with these variables. The two variables, $mySmallNumber, and $myLargeNumber are each assigned an integer value. The third variable, $myTotal, stores the added values of $mySmallNumber and $myLargeNumber. Since $mySmallNumber holds one numeric value, and $myLargeNumber holds a second numeric value, this means $myTotal holds the value of the first number added to the second number. This value can change with alterations to either of the included variables.",
    "sentences": [
        " Getting Started with Echo Statements Open a text editor.",
        "This is the program you will be using write and edit your code.",
        "Notepad can be accessed on any version of Windows using \u229e Win + R > Notepad.",
        "TextEdit can be accessed on Mac by going to Applications > TextEdit.",
        "Type a simple statement into Notepad.",
        "A section of PHP code begins and ends with bracketed PHP tags (\u201c<?php\u201d \u201c?>\u201d).",
        "\u201cEcho\u201d is a very basic statement (an instruction to the computer) in the PHP language that will output text to the screen.",
        "The text you want to echo must be enclosed in quotation marks and end in a semi-colon.",
        "The code should look something like <?php echo \u201cHello World!\u201d; ?>.",
        "Save the file with name \u201chello world\u201d and the extension .php.",
        "This is done by navigating to File > Save As...",
        "In Notepad, add .php to the end of the filename and enclose in double quotations.",
        "This ensures the file will not be converted into a basic text file by Notepad.",
        "Without the quotation marks, the file will become hello world.php.txt.",
        "Alternatively, you can select the drop down menu under Save as type and change it to \"All Files (*.",
        "*)\" which will leave the name exactly how you type it and the quotes will not be needed.",
        "In TextEdit, no quotations marks are necessary, but a popup will appear asking you to verify that you want the file saved as .php.",
        "Make sure you save the file to your \u201cserver\u2019s\u201d document root directory.",
        "Typically this is the folder named \u201chtdocs\u201d in your Apache folder on Windows, or /Library/Webserver/Documents on Mac, but can be set by the user manually.",
        "Access the PHP file with a web browser.",
        "Open your preferred web browser and type this address in the address bar using the name of your php file: http://localhost/hello world.php.",
        "Your browser window should display the echo statement.",
        "If you receive an error message, make sure you typed the code correctly as shown above, including the colon.",
        "Also make sure that your file is saved into the correct directory.",
        "Utilizing PHP and HTML Understand the \u2018php\u2019 tags.",
        "The \u201c<?php\u201d and \u201c?>\u201d tags tell the PHP engine that everything between them is PHP code.",
        "Everything outside the two tags is treated as HTML and ignored by the PHP engine and sent to your browser the same as any other HTML.",
        "The important thing to recognize here is that PHP scripts are embedded inside regular HTML pages.",
        "Understand the statement between the tags.",
        "Statements are used to tell the PHP engine to do something.",
        "In the case of an echo statement, you are telling the engine to print what is inside the quotes.",
        "The PHP engine itself never actually prints anything to your screen.",
        "Any output generated by the engine is sent to your browser as HTML.",
        "Your browser does not know that it's getting PHP output.",
        "As far as the browser is concerned, it's getting plain HTML.",
        "Use HTML tags to make your statement bold.",
        "Adding HTML tags can alter the output of the php statement.",
        "The \u201c<strong>\u201d \u201c</strong>\u201d tags will add bold formatting to any text placed inside of them.",
        "Note that these tags appear on the outside of the text, but inside of the quotations marks of the echo statement.",
        "You want your code to look something like: <?php?echo \"<strong>Hello World!</strong>\";?> Save and open the file in the browser.",
        "Go to File > Save As\u2026 and save the file as \"helloworld2.php\u201d, and open it in your browser by using the address: http://localhost/helloworld2.php.",
        "The output is the same as before, but this time the text is in bold.",
        "Make sure you save the file to your \u201cserver\u2019s\u201d document root directory.",
        "Typically this is the folder named \u201chtdocs\u201d in your Apache folder on Windows, or /Library/Webserver/Documents on OSX, but can be set by the user manually.",
        "Edit the file to add a second echo statement.",
        "Remember, statements need to be separated by a semicolon.",
        "Your code should look something like:<?php echo \u201cHello World!\u201d<br>;echo \u201cHow are you doing?\u201d; ?> Save and run the file as \"hello world double.php\".",
        "The page will display two echo statements, listed in order, on two lines.",
        "Notice the \u201c<br>\u201d on the first line.",
        "This is HTML markup to insert a line break.",
        "If you didn't add this, your output would look like this: Hello World!How are you doing?",
        "Getting to Know Variables Think of variables as containers for data.",
        "To manipulate data, be it numbers or names, you need to store the data in a container.",
        "This process is called declaring the variable.",
        "The syntax for declaring a variable is \u201c$myVariable = \u201cHello World!\u201d;\u201d\nThe dollar sign ($) at the beginning tells PHP that $myVariable is a variable.",
        "All variables must start with the dollar sign, but the name of the variable can be anything.",
        "In the above example, the value is \"Hello World!",
        "\", and the variable is $myVariable.",
        "You're telling PHP to store the value at the right of the equal sign, into the variable at the left of the equal sign.",
        "A variable containing a text value is known as a string.",
        "Call the variable.",
        "Referring to a variable in the code is known as a call.",
        "Declare your variable, then echo the variable instead of typing out the text.",
        "Your code might look something like:<?php>$myVariable = \u201cHello World!\u201d;echo $myVariable;?> Save and run the file.",
        "Go to File > Save As\u2026 and save the file as \u201cmyfirstvariable.php\u201d.",
        "Open your browser and navigate to http://localhost/myfirstvariable.php and the script will print the variable.",
        "The output looks the same as printing plain text, but how it was achieved is different.",
        "Make sure you save the file to your \u201cserver\u2019s\u201d document root directory.",
        "Typically this is the folder named \u201chtdocs\u201d in your Apache folder on Windows, or /Library/Webserver/Documents on OSX, but can be set by the user manually.",
        "Use variables with numbers.",
        "Variables can also contain numbers (known as integers), and then those numbers can be manipulated using simple mathematical functions.",
        "Start by declaring three variables called \u201c$mySmallNumber\u201d, \u201c$myLargeNumber\u201d, and \u201c$myTotal\u201d.",
        "Your code should look something like:<?php$mySmallNumber;$myLargeNumber;$myTotal;?> Assign integer values to the first two variables.",
        "Give an integer value to \u201c$mySmallNumber\u201d and \u201cmyLargeNumber\u201d.",
        "Note that integer values do not need to be contained in quotation marks.",
        "That will cause numbers to be treated as a text value like the \u201cHello World!\u201d variable.",
        "Your code should look something like:<?php$mySmallNumber = 12;$myLargeNumber = 356;$myTotal;?> Use the third variable to calculate and print the sum of the other variables.",
        "Rather than doing the math yourself, you can call the two variables in the \u201c$myTotal\u201d variable.",
        "Using a mathematical function, the machine will calculate the sum for you.",
        "To print the variable, you need only add an echo statement that calls the variable after the declaration.",
        "Any change to either integer variable would be reflected when printing the \u201c$myTotal\u201d variable with echo.",
        "Your code should look something like:<?php$mySmallNumber = 12;$myLargeNumber = 356;$myTotal = $mySmall Number + $myLargeNumber;echo $myTotal;?> Save the file and run this script.",
        "Your browser window will display a single number.",
        "That number is the sum of the two variables called in the \u201c$myTotal\u201d variable.",
        "Review your string variables.",
        "Using a variable to store text allows you to call that variable any time you want to use the store value instead of constantly typing out the contained text.",
        "It also allows for more complex manipulation of the stored data moving forward.",
        "The first variable, $myVariable, contains a string value; \"Hello World!\".",
        "Unless you change the value, $myVariable will always contain the value \"Hello World!\".",
        "The echo statement prints the contained value of $myVariable.",
        "Review your integer variables.",
        "You have explored basic manipulation of integer variables by using a mathematical function.",
        "The resulting data can be stored into another variable.",
        "This is only the beginning of what can be accomplished with these variables.",
        "The two variables, $mySmallNumber, and $myLargeNumber are each assigned an integer value.",
        "The third variable, $myTotal, stores the added values of $mySmallNumber and $myLargeNumber.",
        "Since $mySmallNumber holds one numeric value, and $myLargeNumber holds a second numeric value, this means $myTotal holds the value of the first number added to the second number.",
        "This value can change with alterations to either of the included variables."
    ]
}