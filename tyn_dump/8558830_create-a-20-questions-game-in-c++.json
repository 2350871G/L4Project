{
    "title": "How to Create a 20 Questions Game in C++",
    "url": "https://www.wikihow.com/Create-a-20-Questions-Game-in-C%2B%2B",
    "category_hierarchy": [
        "Computers and Electronics",
        "Software",
        "Programming",
        "C Programming Languages"
    ],
    "parts": [
        {
            "name": "Creating a Project",
            "steps": [
                {
                    "headline": "Obtain a copy of Visual Studio and open it.",
                    "description": "You can find a detailed guide to setup at How to Install and Setup Visual Studio Express 2013."
                },
                {
                    "headline": "Create a project by clicking the file tab on the top left and clicking New Project.",
                    "description": ""
                },
                {
                    "headline": "Click the Templates tab on the left.",
                    "description": ""
                },
                {
                    "headline": "Click Visual C++ under the templates tab.",
                    "description": ""
                },
                {
                    "headline": "Click Empty Project in the middle.",
                    "description": ""
                },
                {
                    "headline": "Name your project something relevant.",
                    "description": "For example: 20 Questions Game."
                },
                {
                    "headline": "Add a source file.",
                    "description": "Right-click Source Files on the right side of the screen under the solution explorer box. Then hover add and click New File. Source Files -> Add -> New File"
                },
                {
                    "headline": "Select C++ file(.cpp), name it something relevant and click Add.",
                    "description": "For example: \"Main.cpp\" because this will be our main source file. This naming scheme is especially important in larger scale programs that require more than one file."
                }
            ]
        },
        {
            "name": "Setting Up the Program",
            "steps": [
                {
                    "headline": "Begin the programming setup.",
                    "description": "Type: #include<iostream>\nThis includes a file in the C++ library that allows console manipulation. Type: using namespace std;\nThis means you\u2019re using a standard (std) namespace. Type: int main(){ }\nThis is the main function that the program will run. Everything runs through this. In between the curly braces { }, press enter a few times. Everything goes in between the curly braces. Note: The green colored words are comments. These are for you (the interpreter) to make better sense of the code."
                },
                {
                    "headline": "Declare the variables.",
                    "description": "Within the main function brackets,(int main()), create the following variables:\nint max = 100;\nint min = 0;\nchar ans;\nint num = 0;\nint guess;\n\nint numGuess = 0;\nNote that some variables are declared with values, while others are not. This is because those variables are required by the program to be predefined. This is determined by how they're used."
                },
                {
                    "headline": "Create the message to the user.",
                    "description": "Type: cout << \u201cThink of a number between 1 and 100.\u201d << endl;\nThis prompts the user for their number, giving them an idea of what is required of them."
                }
            ]
        },
        {
            "name": "Programming the Logic",
            "steps": [
                {
                    "headline": "Create the do-while loop.",
                    "description": "This will control all of the game logic. Type: do{ }while(num == 0 && numGuess < 20);\n\nPress \u21b5 Enter a few times between the braces. Note: num == 0 && numGuess < 20 basically means the loop will continue until num equals 0 AND numGuess is less than 20."
                },
                {
                    "headline": "Type everything in the picture within the do-while brackets.",
                    "description": "Understand the logic of the loop:\nThe user will enter Y or N, based on their number. If their number is greater than or equal to guess, numGuess increments by 1 and the program makes a guess. If the guess is correct, the program breaks out of the loop and the computer wins. If the guess is incorrect, min = guess; effectively cutting the range of values in half and starting the loop over again. If their number is not greater than or equal to guess, numGuess increments by 1 and max = guess; cutting the range of values in half and starting the loop over again. The program will go through these guesses and checks until it narrows the users number down to a single number or it reaches its 20 question limit. Save and run the program. At this point, it should do everything it's intended to do, excluding the concluding message. If the program suddenly closes when it guesses your number or when it fails to guess your number, that's normal. We will fix this in the next few steps."
                },
                {
                    "headline": "Type everything in the picture after the do-while loop.",
                    "description": "This will be the concluding lines of code that handle whether or not the player wins. Understand the logic of the concluding message:\nIf the numGuess equals 20 and num equals 0, the computer could not guess you number. Note that the value of num will never change if the users number is never guessed. If the users number is guessed correctly, the computer will output your number and a little victory smiley face. Note the lines system(\"pause\"); and return 0;\nsystem(\"pause\") simply pauses the program, allowing the user to read the message. return 0; exists because it is good practice to return a value in the main function; even if the value is irrelevant."
                },
                {
                    "headline": "Review your completed program.",
                    "description": ""
                }
            ]
        }
    ],
    "tyn": [
        "A computer or equivalent electronic device that supports Visual Studio.",
        "Visual Studio 2013 or greater"
    ],
    "text": " Creating a Project Obtain a copy of Visual Studio and open it. You can find a detailed guide to setup at How to Install and Setup Visual Studio Express 2013. Create a project by clicking the file tab on the top left and clicking New Project.  Click the Templates tab on the left.  Click Visual C++ under the templates tab.  Click Empty Project in the middle.  Name your project something relevant. For example: 20 Questions Game. Add a source file. Right-click Source Files on the right side of the screen under the solution explorer box. Then hover add and click New File. Source Files -> Add -> New File Select C++ file(.cpp), name it something relevant and click Add. For example: \"Main.cpp\" because this will be our main source file. This naming scheme is especially important in larger scale programs that require more than one file. Setting Up the Program Begin the programming setup. Type: #include<iostream>\nThis includes a file in the C++ library that allows console manipulation. Type: using namespace std;\nThis means you\u2019re using a standard (std) namespace. Type: int main(){ }\nThis is the main function that the program will run. Everything runs through this. In between the curly braces { }, press enter a few times. Everything goes in between the curly braces. Note: The green colored words are comments. These are for you (the interpreter) to make better sense of the code. Declare the variables. Within the main function brackets,(int main()), create the following variables:\nint max = 100;\nint min = 0;\nchar ans;\nint num = 0;\nint guess;\n\nint numGuess = 0;\nNote that some variables are declared with values, while others are not. This is because those variables are required by the program to be predefined. This is determined by how they're used. Create the message to the user. Type: cout << \u201cThink of a number between 1 and 100.\u201d << endl;\nThis prompts the user for their number, giving them an idea of what is required of them. Programming the Logic Create the do-while loop. This will control all of the game logic. Type: do{ }while(num == 0 && numGuess < 20);\n\nPress \u21b5 Enter a few times between the braces. Note: num == 0 && numGuess < 20 basically means the loop will continue until num equals 0 AND numGuess is less than 20. Type everything in the picture within the do-while brackets. Understand the logic of the loop:\nThe user will enter Y or N, based on their number. If their number is greater than or equal to guess, numGuess increments by 1 and the program makes a guess. If the guess is correct, the program breaks out of the loop and the computer wins. If the guess is incorrect, min = guess; effectively cutting the range of values in half and starting the loop over again. If their number is not greater than or equal to guess, numGuess increments by 1 and max = guess; cutting the range of values in half and starting the loop over again. The program will go through these guesses and checks until it narrows the users number down to a single number or it reaches its 20 question limit. Save and run the program. At this point, it should do everything it's intended to do, excluding the concluding message. If the program suddenly closes when it guesses your number or when it fails to guess your number, that's normal. We will fix this in the next few steps. Type everything in the picture after the do-while loop. This will be the concluding lines of code that handle whether or not the player wins. Understand the logic of the concluding message:\nIf the numGuess equals 20 and num equals 0, the computer could not guess you number. Note that the value of num will never change if the users number is never guessed. If the users number is guessed correctly, the computer will output your number and a little victory smiley face. Note the lines system(\"pause\"); and return 0;\nsystem(\"pause\") simply pauses the program, allowing the user to read the message. return 0; exists because it is good practice to return a value in the main function; even if the value is irrelevant. Review your completed program. ",
    "sentences": [
        " Creating a Project Obtain a copy of Visual Studio and open it.",
        "You can find a detailed guide to setup at How to Install and Setup Visual Studio Express 2013.",
        "Create a project by clicking the file tab on the top left and clicking New Project.",
        "Click the Templates tab on the left.",
        "Click Visual C++ under the templates tab.",
        "Click Empty Project in the middle.",
        "Name your project something relevant.",
        "For example: 20 Questions Game.",
        "Add a source file.",
        "Right-click Source Files on the right side of the screen under the solution explorer box.",
        "Then hover add and click New File.",
        "Source Files -> Add -> New File Select C++ file(.cpp), name it something relevant and click Add.",
        "For example: \"Main.cpp\" because this will be our main source file.",
        "This naming scheme is especially important in larger scale programs that require more than one file.",
        "Setting Up the Program Begin the programming setup.",
        "Type: #include<iostream>\nThis includes a file in the C++ library that allows console manipulation.",
        "Type: using namespace std;\nThis means you\u2019re using a standard (std) namespace.",
        "Type: int main(){ }\nThis is the main function that the program will run.",
        "Everything runs through this.",
        "In between the curly braces { }, press enter a few times.",
        "Everything goes in between the curly braces.",
        "Note: The green colored words are comments.",
        "These are for you (the interpreter) to make better sense of the code.",
        "Declare the variables.",
        "Within the main function brackets,(int main()), create the following variables:\nint max = 100;\nint min = 0;\nchar ans;\nint num = 0;\nint guess;\n\nint numGuess = 0;\nNote that some variables are declared with values, while others are not.",
        "This is because those variables are required by the program to be predefined.",
        "This is determined by how they're used.",
        "Create the message to the user.",
        "Type: cout << \u201cThink of a number between 1 and 100.\u201d << endl;\nThis prompts the user for their number, giving them an idea of what is required of them.",
        "Programming the Logic Create the do-while loop.",
        "This will control all of the game logic.",
        "Type: do{ }while(num == 0 && numGuess < 20);\n\nPress \u21b5 Enter a few times between the braces.",
        "Note: num == 0 && numGuess < 20 basically means the loop will continue until num equals 0 AND numGuess is less than 20.",
        "Type everything in the picture within the do-while brackets.",
        "Understand the logic of the loop:\nThe user will enter Y or N, based on their number.",
        "If their number is greater than or equal to guess, numGuess increments by 1 and the program makes a guess.",
        "If the guess is correct, the program breaks out of the loop and the computer wins.",
        "If the guess is incorrect, min = guess; effectively cutting the range of values in half and starting the loop over again.",
        "If their number is not greater than or equal to guess, numGuess increments by 1 and max = guess; cutting the range of values in half and starting the loop over again.",
        "The program will go through these guesses and checks until it narrows the users number down to a single number or it reaches its 20 question limit.",
        "Save and run the program.",
        "At this point, it should do everything it's intended to do, excluding the concluding message.",
        "If the program suddenly closes when it guesses your number or when it fails to guess your number, that's normal.",
        "We will fix this in the next few steps.",
        "Type everything in the picture after the do-while loop.",
        "This will be the concluding lines of code that handle whether or not the player wins.",
        "Understand the logic of the concluding message:\nIf the numGuess equals 20 and num equals 0, the computer could not guess you number.",
        "Note that the value of num will never change if the users number is never guessed.",
        "If the users number is guessed correctly, the computer will output your number and a little victory smiley face.",
        "Note the lines system(\"pause\"); and return 0;\nsystem(\"pause\") simply pauses the program, allowing the user to read the message.",
        "return 0; exists because it is good practice to return a value in the main function; even if the value is irrelevant.",
        "Review your completed program."
    ]
}